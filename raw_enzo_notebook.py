{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":46105,"databundleVersionId":5087314,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:22:43.351274Z\",\"iopub.execute_input\":\"2024-05-22T08:22:43.351631Z\",\"iopub.status.idle\":\"2024-05-22T08:22:44.362666Z\",\"shell.execute_reply.started\":\"2024-05-22T08:22:43.351603Z\",\"shell.execute_reply\":\"2024-05-22T08:22:44.361378Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nprint(os.listdir('/kaggle/input'))\n\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     print(dirname)\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:20.313575Z\",\"iopub.execute_input\":\"2024-05-22T08:23:20.314531Z\",\"iopub.status.idle\":\"2024-05-22T08:23:20.318977Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:20.314496Z\",\"shell.execute_reply\":\"2024-05-22T08:23:20.317909Z\"}}\nimport matplotlib.pyplot as plt\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:20.881598Z\",\"iopub.execute_input\":\"2024-05-22T08:23:20.881952Z\",\"iopub.status.idle\":\"2024-05-22T08:23:20.899305Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:20.881925Z\",\"shell.execute_reply\":\"2024-05-22T08:23:20.898114Z\"}}\ndataset_path = '/kaggle/input/asl-signs/train_landmark_files'\nuser_ids = os.listdir('/kaggle/input/asl-signs/train_landmark_files')\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:21.863431Z\",\"iopub.execute_input\":\"2024-05-22T08:23:21.863817Z\",\"iopub.status.idle\":\"2024-05-22T08:23:21.870686Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:21.863787Z\",\"shell.execute_reply\":\"2024-05-22T08:23:21.869384Z\"}}\nROWS_PER_FRAME = 543  # number of landmarks per frame\n\ndef load_relevant_data_subset(pq_path):\n    data_columns = ['x', 'y']\n    data = pd.read_parquet(pq_path, columns=data_columns)\n    n_frames = int(len(data) / ROWS_PER_FRAME)\n    data = data.values.reshape(n_frames, ROWS_PER_FRAME, len(data_columns))\n    return data.astype(np.float32)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:24.354131Z\",\"iopub.execute_input\":\"2024-05-22T08:23:24.354529Z\",\"iopub.status.idle\":\"2024-05-22T08:23:24.359422Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:24.354499Z\",\"shell.execute_reply\":\"2024-05-22T08:23:24.358170Z\"}}\ntest_path = '/kaggle/input/asl-signs/train_landmark_files/36257'\n\n# %% [code] {\"scrolled\":true,\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:24.895209Z\",\"iopub.execute_input\":\"2024-05-22T08:23:24.895619Z\",\"iopub.status.idle\":\"2024-05-22T08:23:25.520997Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:24.895588Z\",\"shell.execute_reply\":\"2024-05-22T08:23:25.519354Z\"}}\ntest_filenames = os.listdir(test_path)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:25.522988Z\",\"iopub.execute_input\":\"2024-05-22T08:23:25.523380Z\",\"iopub.status.idle\":\"2024-05-22T08:23:25.529174Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:25.523349Z\",\"shell.execute_reply\":\"2024-05-22T08:23:25.527756Z\"}}\nparquet_path = os.path.join(test_path, test_filenames[1])\nprint(parquet_path)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:25.718362Z\",\"iopub.execute_input\":\"2024-05-22T08:23:25.718734Z\",\"iopub.status.idle\":\"2024-05-22T08:23:25.856409Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:25.718705Z\",\"shell.execute_reply\":\"2024-05-22T08:23:25.855058Z\"}}\nmytest0 = load_relevant_data_subset(parquet_path)\nmytest0.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:26.265392Z\",\"iopub.execute_input\":\"2024-05-22T08:23:26.265770Z\",\"iopub.status.idle\":\"2024-05-22T08:23:26.271262Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:26.265740Z\",\"shell.execute_reply\":\"2024-05-22T08:23:26.270026Z\"}}\nx_test, y_test = mytest0[0][:,0],mytest0[0][:,1]\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:28.226294Z\",\"iopub.execute_input\":\"2024-05-22T08:23:28.226694Z\",\"iopub.status.idle\":\"2024-05-22T08:23:28.233663Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:28.226662Z\",\"shell.execute_reply\":\"2024-05-22T08:23:28.232489Z\"}}\ntype(mytest0)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:28.376952Z\",\"iopub.execute_input\":\"2024-05-22T08:23:28.377334Z\",\"iopub.status.idle\":\"2024-05-22T08:23:28.384470Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:28.377305Z\",\"shell.execute_reply\":\"2024-05-22T08:23:28.383402Z\"}}\nmytest0[0]\n\n# %% [markdown]\n# ### **Prepocessing**\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:29:45.696826Z\",\"iopub.execute_input\":\"2024-05-22T08:29:45.697273Z\",\"iopub.status.idle\":\"2024-05-22T08:29:45.732473Z\",\"shell.execute_reply.started\":\"2024-05-22T08:29:45.697224Z\",\"shell.execute_reply\":\"2024-05-22T08:29:45.731303Z\"}}\nparquet_path = os.path.join(test_path, test_filenames[0])\ncols = ['frame', 'row_id', 'type', 'landmark_index', 'x', 'y', 'z']\nparquet_df = pd.read_parquet(parquet_path, columns=cols)\nparquet_df.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:37.367212Z\",\"iopub.execute_input\":\"2024-05-22T08:23:37.367989Z\",\"iopub.status.idle\":\"2024-05-22T08:23:37.372083Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:37.367956Z\",\"shell.execute_reply\":\"2024-05-22T08:23:37.370996Z\"}}\n# normalized_df=(df-df.mean())/df.std()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:23:37.831197Z\",\"iopub.execute_input\":\"2024-05-22T08:23:37.831949Z\",\"iopub.status.idle\":\"2024-05-22T08:23:37.840741Z\",\"shell.execute_reply.started\":\"2024-05-22T08:23:37.831910Z\",\"shell.execute_reply\":\"2024-05-22T08:23:37.839674Z\"}}\nparquet_df_f = parquet_df[parquet_df.frame == 1]\nparquet_df_c = parquet_df_f.copy()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:13:45.294241Z\",\"iopub.execute_input\":\"2024-05-21T14:13:45.294870Z\",\"iopub.status.idle\":\"2024-05-21T14:13:45.301646Z\",\"shell.execute_reply.started\":\"2024-05-21T14:13:45.294837Z\",\"shell.execute_reply\":\"2024-05-21T14:13:45.300418Z\"}}\nlen(parquet_df.frame.unique())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:13:45.699235Z\",\"iopub.execute_input\":\"2024-05-21T14:13:45.699861Z\",\"iopub.status.idle\":\"2024-05-21T14:13:45.706626Z\",\"shell.execute_reply.started\":\"2024-05-21T14:13:45.699827Z\",\"shell.execute_reply\":\"2024-05-21T14:13:45.705532Z\"}}\nnp.min(parquet_df_c.x)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:13:46.227333Z\",\"iopub.execute_input\":\"2024-05-21T14:13:46.227841Z\",\"iopub.status.idle\":\"2024-05-21T14:13:46.236742Z\",\"shell.execute_reply.started\":\"2024-05-21T14:13:46.227804Z\",\"shell.execute_reply\":\"2024-05-21T14:13:46.235225Z\"}}\n# remove NaN value, replace by mean\nparquet_df_c['x'] = parquet_df_f['x'].fillna(parquet_df_f['x'].mean())\nparquet_df_c['y'] = parquet_df_f['y'].fillna(parquet_df_f['y'].mean())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:13:46.634509Z\",\"iopub.execute_input\":\"2024-05-21T14:13:46.634902Z\",\"iopub.status.idle\":\"2024-05-21T14:13:46.642950Z\",\"shell.execute_reply.started\":\"2024-05-21T14:13:46.634871Z\",\"shell.execute_reply\":\"2024-05-21T14:13:46.641800Z\"}}\nnp.sum(parquet_df_c.y.isna())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:13:47.108223Z\",\"iopub.execute_input\":\"2024-05-21T14:13:47.108629Z\",\"iopub.status.idle\":\"2024-05-21T14:13:47.118030Z\",\"shell.execute_reply.started\":\"2024-05-21T14:13:47.108595Z\",\"shell.execute_reply\":\"2024-05-21T14:13:47.117136Z\"}}\n# normalize columns\nnormalized_df = parquet_df_c.copy()\nnormalized_df['x'] = (parquet_df_c['x']-parquet_df_c['x'].min())/(parquet_df_c['x'].max()-parquet_df_c['x'].min())\nnormalized_df['y'] = (parquet_df_c['y']-parquet_df_c['y'].min())/(parquet_df_c['y'].max()-parquet_df_c['y'].min())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:13:48.615876Z\",\"iopub.execute_input\":\"2024-05-21T14:13:48.616273Z\",\"iopub.status.idle\":\"2024-05-21T14:13:48.626309Z\",\"shell.execute_reply.started\":\"2024-05-21T14:13:48.616237Z\",\"shell.execute_reply\":\"2024-05-21T14:13:48.624771Z\"}}\nnp.max(normalized_df['x']), np.max(normalized_df['y'])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:13:49.063540Z\",\"iopub.execute_input\":\"2024-05-21T14:13:49.063960Z\",\"iopub.status.idle\":\"2024-05-21T14:13:49.079542Z\",\"shell.execute_reply.started\":\"2024-05-21T14:13:49.063927Z\",\"shell.execute_reply\":\"2024-05-21T14:13:49.078248Z\"}}\nnormalized_df.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:14:18.599766Z\",\"iopub.execute_input\":\"2024-05-21T14:14:18.600829Z\",\"iopub.status.idle\":\"2024-05-21T14:14:18.608270Z\",\"shell.execute_reply.started\":\"2024-05-21T14:14:18.600786Z\",\"shell.execute_reply\":\"2024-05-21T14:14:18.607005Z\"}}\nnormalized_df.index\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:46:59.364845Z\",\"iopub.execute_input\":\"2024-05-22T08:46:59.365716Z\",\"iopub.status.idle\":\"2024-05-22T08:46:59.374512Z\",\"shell.execute_reply.started\":\"2024-05-22T08:46:59.365679Z\",\"shell.execute_reply\":\"2024-05-22T08:46:59.373393Z\"}}\n# lips idx\nLIPS_IDXS0 = np.array([\n        61, 185, 40, 39, 37, 0, 267, 269, 270, 409,\n        291, 146, 91, 181, 84, 17, 314, 405, 321, 375,\n        78, 191, 80, 81, 82, 13, 312, 311, 310, 415,\n        95, 88, 178, 87, 14, 317, 402, 318, 324, 308,\n    ])\n\n# left hand, by taking account face from 0 to 468\nLEFT_HAND_IDXS0 = np.arange(468,489)\nRIGHT_HAND_IDXS0 = np.arange(522,543)\nLEFT_POSE_IDXS0 = np.array([502, 504, 506, 508, 510])\nRIGHT_POSE_IDXS0 = np.array([503, 505, 507, 509, 511])\n\nREDUCED_LANDMARKS = np.sort(np.concatenate([LIPS_IDXS0, LEFT_HAND_IDXS0, RIGHT_HAND_IDXS0, LEFT_POSE_IDXS0, RIGHT_POSE_IDXS0]))\nprint(REDUCED_LANDMARKS)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:36:24.114052Z\",\"iopub.execute_input\":\"2024-05-22T08:36:24.114443Z\",\"iopub.status.idle\":\"2024-05-22T08:36:24.123381Z\",\"shell.execute_reply.started\":\"2024-05-22T08:36:24.114414Z\",\"shell.execute_reply\":\"2024-05-22T08:36:24.122262Z\"}}\nframe_df = parquet_df[parquet_df.frame == 0]\nxx = frame_df[frame_df.type=='left_hand'].x\nyy = frame_df[frame_df.type=='left_hand'].y\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:41:51.579543Z\",\"iopub.execute_input\":\"2024-05-22T08:41:51.580057Z\",\"iopub.status.idle\":\"2024-05-22T08:41:51.598624Z\",\"shell.execute_reply.started\":\"2024-05-22T08:41:51.580006Z\",\"shell.execute_reply\":\"2024-05-22T08:41:51.597439Z\"}}\nframe_df.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:36:25.454164Z\",\"iopub.execute_input\":\"2024-05-22T08:36:25.454543Z\",\"iopub.status.idle\":\"2024-05-22T08:36:25.717000Z\",\"shell.execute_reply.started\":\"2024-05-22T08:36:25.454517Z\",\"shell.execute_reply\":\"2024-05-22T08:36:25.715737Z\"}}\nplt.scatter(xx,yy)\nplt.scatter(xx[LEFT_HAND_IDXS0], yy[LEFT_HAND_IDXS0], s=4,c = 'r')\n\n# %% [markdown]\n# **Note** positions kept as wanted\n\n# %% [code]\nparquet_path = os.path.join(dataset_path, user_ids[0],test_filenames[10]) # only first sequence of user here\ncols = ['frame', 'row_id', 'type', 'landmark_index', 'x', 'y', 'z']\nparquet_df = pd.read_parquet(parquet_path, columns=cols)\n# type distribution for 1st seuence\ndd= dict(parquet_df.type.value_counts())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:24:09.319195Z\",\"iopub.execute_input\":\"2024-05-22T08:24:09.319598Z\",\"iopub.status.idle\":\"2024-05-22T08:24:09.345624Z\",\"shell.execute_reply.started\":\"2024-05-22T08:24:09.319571Z\",\"shell.execute_reply\":\"2024-05-22T08:24:09.344483Z\"}}\n# function to replace NaN and normalize columns \npq_path = os.path.join(dataset_path, user_ids[0],test_filenames[3]) # only first sequence of user here\ncols = ['frame', 'row_id', 'type', 'landmark_index', 'x', 'y', 'z']\nsqc_df = pd.read_parquet(pq_path, columns=cols)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:59:11.755836Z\",\"iopub.execute_input\":\"2024-05-22T08:59:11.756264Z\",\"iopub.status.idle\":\"2024-05-22T08:59:12.533366Z\",\"shell.execute_reply.started\":\"2024-05-22T08:59:11.756206Z\",\"shell.execute_reply\":\"2024-05-22T08:59:12.532316Z\"}}\ndef normalize_sequence(sequence_dataframe):\n    '''\n        function to normalize coordinates columns (x,y) per frame, also replace NaN values by column mean\n        sequence_dataset is a pandas dataframe containing a sequence of an user\n    '''\n\n\n\n    frame_sqc_idx = sqc_df.frame.unique()\n    normalized_df = pd.DataFrame()\n\n    for frame in frame_sqc_idx:\n        frame_df = sqc_df[sqc_df.frame == frame]\n        frame_df1 = frame_df.copy()\n        \n        na_x = frame_df['x'].fillna(0.0)\n        na_y = frame_df['y'].fillna(0.0)\n\n        x_norm = (na_x-np.min(na_x))/(np.max(na_x)-np.min(na_x))\n        y_norm = (na_y-np.min(na_y))/(np.max(na_y)-np.min(na_y))\n\n        frame_df1.x, frame_df1.y = x_norm, y_norm\n        normalized_df = pd.concat([normalized_df, frame_df1])\n    \n    return normalized_df\n\nnormalized_df=normalize_sequence(sqc_df)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:25:53.422931Z\",\"iopub.execute_input\":\"2024-05-22T08:25:53.423324Z\",\"iopub.status.idle\":\"2024-05-22T08:25:53.430091Z\",\"shell.execute_reply.started\":\"2024-05-22T08:25:53.423293Z\",\"shell.execute_reply\":\"2024-05-22T08:25:53.428986Z\"}}\nlen(sqc_df), len(normalized_df)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-21T13:27:24.530262Z\",\"iopub.execute_input\":\"2024-05-21T13:27:24.530645Z\",\"iopub.status.idle\":\"2024-05-21T13:27:24.542695Z\",\"shell.execute_reply.started\":\"2024-05-21T13:27:24.530615Z\",\"shell.execute_reply\":\"2024-05-21T13:27:24.541430Z\"}}\nlen(parquet_df[parquet_df.frame == 0])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:24:13.312062Z\",\"iopub.execute_input\":\"2024-05-22T08:24:13.312482Z\",\"iopub.status.idle\":\"2024-05-22T08:24:13.328493Z\",\"shell.execute_reply.started\":\"2024-05-22T08:24:13.312449Z\",\"shell.execute_reply\":\"2024-05-22T08:24:13.327313Z\"}}\nv = load_relevant_data_subset(pq_path)\nprint(v.shape)\nu = v[0]\n# frame 0, x values\nprint(u[:,0])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:49:16.718542Z\",\"iopub.execute_input\":\"2024-05-22T08:49:16.718927Z\",\"iopub.status.idle\":\"2024-05-22T08:49:16.732653Z\",\"shell.execute_reply.started\":\"2024-05-22T08:49:16.718900Z\",\"shell.execute_reply\":\"2024-05-22T08:49:16.731284Z\"}}\ndef normalize_loaded_sequence(loaded_sqc):\n    normalized_sqc = np.zeros((loaded_sqc.shape[0], len(REDUCED_LANDMARKS), 2))\n    \n    for frm_idx in range(loaded_sqc.shape[0]):\n        frame_array = loaded_sqc[frm_idx]\n        \n        na_x = np.nan_to_num(frame_array[REDUCED_LANDMARKS,0], nan=0.0)\n        na_y = np.nan_to_num(frame_array[REDUCED_LANDMARKS,1], nan=0.0)\n\n\n        x_norm = (na_x-np.min(na_x))/(np.max(na_x)-np.min(na_x))\n        y_norm = (na_y-np.min(na_y))/(np.max(na_y)-np.min(na_y))\n\n        normalized_sqc[frm_idx,:,0],  normalized_sqc[frm_idx,:,1] = x_norm, y_norm\n    \n    return normalized_sqc\n\nn_v = normalize_loaded_sequence(v)\nprint(n_v.shape)\nprint(np.max(n_v[0,:,0]), np.min(n_v[0,:,0]))\n\n# %% [markdown]\n# **Note** at this step I have a normalized tensor built after loading data\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T08:49:21.433215Z\",\"iopub.execute_input\":\"2024-05-22T08:49:21.433593Z\",\"iopub.status.idle\":\"2024-05-22T08:49:21.438842Z\",\"shell.execute_reply.started\":\"2024-05-22T08:49:21.433568Z\",\"shell.execute_reply\":\"2024-05-22T08:49:21.437537Z\"}}\ndef get_data(sqc_path):\n    data = load_relevant_data_subset(sqc_path)\n    data = normalize_loaded_sequence(data)\n    return data\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T09:21:02.581106Z\",\"iopub.execute_input\":\"2024-05-22T09:21:02.581512Z\",\"iopub.status.idle\":\"2024-05-22T09:21:02.626964Z\",\"shell.execute_reply.started\":\"2024-05-22T09:21:02.581482Z\",\"shell.execute_reply\":\"2024-05-22T09:21:02.625804Z\"}}\npq_path = os.path.join(dataset_path, user_ids[0],test_filenames[0]) # only first sequence of user here\ncols = ['frame', 'row_id', 'type', 'landmark_index', 'x', 'y', 'z']\nsqc_df = pd.read_parquet(pq_path, columns=cols)\n\nvv = get_data(pq_path)\nprint(vv.shape)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T09:23:16.788897Z\",\"iopub.execute_input\":\"2024-05-22T09:23:16.789769Z\",\"iopub.status.idle\":\"2024-05-22T09:23:16.796732Z\",\"shell.execute_reply.started\":\"2024-05-22T09:23:16.789732Z\",\"shell.execute_reply\":\"2024-05-22T09:23:16.795691Z\"}}\nlen(n_df.frame.unique())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T09:21:35.118760Z\",\"iopub.execute_input\":\"2024-05-22T09:21:35.119168Z\",\"iopub.status.idle\":\"2024-05-22T09:21:35.274667Z\",\"shell.execute_reply.started\":\"2024-05-22T09:21:35.119138Z\",\"shell.execute_reply\":\"2024-05-22T09:21:35.273762Z\"}}\nn_df = normalize_sequence(sqc_df)\nframe_df0 = n_df[n_df.frame == n_df.frame.unique()[0]]\nframe_df1 = n_df[n_df.frame == n_df.frame.unique()[10]]\n\nX0 = frame_df0.x\nY0= frame_df0.y\n\nX1 = frame_df1.x\nY1= frame_df1.y\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T09:21:36.280407Z\",\"iopub.execute_input\":\"2024-05-22T09:21:36.281425Z\",\"iopub.status.idle\":\"2024-05-22T09:21:36.500262Z\",\"shell.execute_reply.started\":\"2024-05-22T09:21:36.281392Z\",\"shell.execute_reply\":\"2024-05-22T09:21:36.499152Z\"}}\nplt.figure()\nplt.scatter(X0,Y0)\nplt.scatter(vv[0,:,0],vv[0,:,1], s=2, c='r')\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T09:21:36.707792Z\",\"iopub.execute_input\":\"2024-05-22T09:21:36.708168Z\",\"iopub.status.idle\":\"2024-05-22T09:21:36.935247Z\",\"shell.execute_reply.started\":\"2024-05-22T09:21:36.708139Z\",\"shell.execute_reply\":\"2024-05-22T09:21:36.934179Z\"}}\nplt.figure()\nplt.scatter(X1,Y1)\nplt.scatter(vv[1,:,0],vv[1,:,1], s=2, c='r')\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T09:33:31.290642Z\",\"iopub.execute_input\":\"2024-05-22T09:33:31.291034Z\",\"iopub.status.idle\":\"2024-05-22T09:33:43.613068Z\",\"shell.execute_reply.started\":\"2024-05-22T09:33:31.291004Z\",\"shell.execute_reply\":\"2024-05-22T09:33:43.611492Z\"},\"jupyter\":{\"outputs_hidden\":true}}\nplt.figure()\nfor i in n_df.frame.unique():\n    frame_df0 = n_df[n_df.frame == i]\n\n    X0 = frame_df0.x\n    Y0= frame_df0.y\n    \n    plt.scatter(X0,Y0)\n    plt.scatter(vv[i,:,0],vv[i,:,1], s=2, c='r')\n#     plt.show()\n    plt.pause(0.1)\n\n# %% [markdown]\n# #### **Note** \n# Normalization using min-max change position of point when using less (but most important) landmarks, is it normal as we used less points.\n# But movement keep the same\n# \n# - RNN or LSTM can be a good simple approach for starting (it can be adapted for Time Series) \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T09:21:39.298033Z\",\"iopub.execute_input\":\"2024-05-22T09:21:39.298439Z\",\"iopub.status.idle\":\"2024-05-22T09:21:39.304732Z\",\"shell.execute_reply.started\":\"2024-05-22T09:21:39.298409Z\",\"shell.execute_reply\":\"2024-05-22T09:21:39.303751Z\"}}\n1086/3\n\n# %% [markdown]\n# #### **TODO**\n# * thing about data augmentation\n# * try to use coatnet -> need to input data with same shape\n# * padding ?\n#     - issue with padding is that we have sequence with much more frames than other, maybe reduce thoses sequences and padding for small sequences\n#     - goal: have se\n\n# %% [code]\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T15:29:57.557975Z\",\"iopub.execute_input\":\"2024-05-21T15:29:57.558346Z\",\"iopub.status.idle\":\"2024-05-21T15:29:57.565475Z\",\"shell.execute_reply.started\":\"2024-05-21T15:29:57.558316Z\",\"shell.execute_reply\":\"2024-05-21T15:29:57.564270Z\"}}\n64*66*3\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T15:26:52.674000Z\",\"iopub.execute_input\":\"2024-05-21T15:26:52.674381Z\",\"iopub.status.idle\":\"2024-05-21T15:26:52.682163Z\",\"shell.execute_reply.started\":\"2024-05-21T15:26:52.674351Z\",\"shell.execute_reply\":\"2024-05-21T15:26:52.680814Z\"}}\n3*64\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T15:25:47.998145Z\",\"iopub.execute_input\":\"2024-05-21T15:25:47.998555Z\",\"iopub.status.idle\":\"2024-05-21T15:25:48.006255Z\",\"shell.execute_reply.started\":\"2024-05-21T15:25:47.998522Z\",\"shell.execute_reply\":\"2024-05-21T15:25:48.005056Z\"}}\nvv[0].shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:52:57.328023Z\",\"iopub.execute_input\":\"2024-05-21T14:52:57.330550Z\",\"iopub.status.idle\":\"2024-05-21T14:52:57.338562Z\",\"shell.execute_reply.started\":\"2024-05-21T14:52:57.330507Z\",\"shell.execute_reply\":\"2024-05-21T14:52:57.337497Z\"}}\nsqc_df.x.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T14:55:40.122023Z\",\"iopub.execute_input\":\"2024-05-16T14:55:40.122427Z\",\"iopub.status.idle\":\"2024-05-16T14:55:40.135453Z\",\"shell.execute_reply.started\":\"2024-05-16T14:55:40.122396Z\",\"shell.execute_reply\":\"2024-05-16T14:55:40.133754Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nparquet_df[parquetagg_df.frame ==5].type.value_counts()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T15:37:07.478816Z\",\"iopub.execute_input\":\"2024-05-16T15:37:07.479163Z\",\"iopub.status.idle\":\"2024-05-16T15:37:07.488151Z\",\"shell.execute_reply.started\":\"2024-05-16T15:37:07.479136Z\",\"shell.execute_reply\":\"2024-05-16T15:37:07.486494Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nparquet_df.frame.value_counts().sum()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:43:09.876279Z\",\"iopub.execute_input\":\"2024-05-21T14:43:09.876705Z\",\"iopub.status.idle\":\"2024-05-21T14:43:10.159277Z\",\"shell.execute_reply.started\":\"2024-05-21T14:43:09.876673Z\",\"shell.execute_reply\":\"2024-05-21T14:43:10.158265Z\"}}\ntrain_path = '/kaggle/input/asl-signs/train.csv'\ntrain = pd.read_csv(train_path)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:43:31.671405Z\",\"iopub.execute_input\":\"2024-05-21T14:43:31.671849Z\",\"iopub.status.idle\":\"2024-05-21T14:43:31.679315Z\",\"shell.execute_reply.started\":\"2024-05-21T14:43:31.671816Z\",\"shell.execute_reply\":\"2024-05-21T14:43:31.678098Z\"}}\nlen(train)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:43:54.997316Z\",\"iopub.execute_input\":\"2024-05-21T14:43:54.997701Z\",\"iopub.status.idle\":\"2024-05-21T14:43:55.006200Z\",\"shell.execute_reply.started\":\"2024-05-21T14:43:54.997671Z\",\"shell.execute_reply\":\"2024-05-21T14:43:55.004949Z\"}}\n64*66\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:43:12.717782Z\",\"iopub.execute_input\":\"2024-05-21T14:43:12.718207Z\",\"iopub.status.idle\":\"2024-05-21T14:43:12.726034Z\",\"shell.execute_reply.started\":\"2024-05-21T14:43:12.718174Z\",\"shell.execute_reply\":\"2024-05-21T14:43:12.724999Z\"}}\ntrain.columns\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-21T14:43:14.347235Z\",\"iopub.execute_input\":\"2024-05-21T14:43:14.347595Z\",\"iopub.status.idle\":\"2024-05-21T14:43:14.364401Z\",\"shell.execute_reply.started\":\"2024-05-21T14:43:14.347567Z\",\"shell.execute_reply\":\"2024-05-21T14:43:14.363113Z\"}}\ntrain.sign.unique()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T13:13:39.410823Z\",\"iopub.execute_input\":\"2024-05-16T13:13:39.411203Z\",\"iopub.status.idle\":\"2024-05-16T13:13:39.418188Z\",\"shell.execute_reply.started\":\"2024-05-16T13:13:39.411173Z\",\"shell.execute_reply\":\"2024-05-16T13:13:39.417090Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nlen(os.listdir('/kaggle/input/asl-signs/train_landmark_files'))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T13:13:41.081892Z\",\"iopub.execute_input\":\"2024-05-16T13:13:41.082233Z\",\"iopub.status.idle\":\"2024-05-16T13:13:41.093979Z\",\"shell.execute_reply.started\":\"2024-05-16T13:13:41.082204Z\",\"shell.execute_reply\":\"2024-05-16T13:13:41.092964Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ntrain.participant_id.unique(), len(train.participant_id.unique())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T13:13:52.371687Z\",\"iopub.execute_input\":\"2024-05-16T13:13:52.372061Z\",\"iopub.status.idle\":\"2024-05-16T13:13:52.386892Z\",\"shell.execute_reply.started\":\"2024-05-16T13:13:52.372030Z\",\"shell.execute_reply\":\"2024-05-16T13:13:52.385709Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ntrain[train.participant_id == 16069]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T13:14:00.529690Z\",\"iopub.execute_input\":\"2024-05-16T13:14:00.530006Z\",\"iopub.status.idle\":\"2024-05-16T13:14:00.567024Z\",\"shell.execute_reply.started\":\"2024-05-16T13:14:00.529979Z\",\"shell.execute_reply\":\"2024-05-16T13:14:00.565592Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nd=dict(train.sign.value_counts(dropna=True))\nprint(train.sign.value_counts(dropna=True).mean())\nprint(train.sign.value_counts(dropna=True).std())\nprint(train.sign.value_counts(dropna=True).max())\nprint(train.sign.value_counts(dropna=True).min())\n\n# word distribution is not too expended\n# any words have close occurences\n\n# %% [markdown]\n# #### **Some notes:**\n# * each parquet contains markers position [x y z] and type (face, left_hand, pose, right_hand) for different frame\n# * train dataset is composed of image path, participant id (folder name of parquet file) sequence id (filename) and word said\n# * one sequence = numerous frames = 1 word\n# * every frame has data for each type, but it is possible that one type has no value in a frame, it is setted to NaN\n# \n# **Goal**: using hand position, be able to understand word said in the sequence\n# * classification between 250 words using positions of body parts in video\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T13:14:18.073454Z\",\"iopub.execute_input\":\"2024-05-16T13:14:18.073806Z\",\"iopub.status.idle\":\"2024-05-16T13:14:18.091034Z\",\"shell.execute_reply.started\":\"2024-05-16T13:14:18.073778Z\",\"shell.execute_reply\":\"2024-05-16T13:14:18.089539Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nimport json\n \n# Opening JSON file\nf = open('/kaggle/input/asl-signs/sign_to_prediction_index_map.json')\n \n# returns JSON object as \n# a dictionary\ndata = json.load(f)\nprint(len(data), data)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T13:14:20.734622Z\",\"iopub.execute_input\":\"2024-05-16T13:14:20.736169Z\",\"iopub.status.idle\":\"2024-05-16T13:14:20.749046Z\",\"shell.execute_reply.started\":\"2024-05-16T13:14:20.736117Z\",\"shell.execute_reply\":\"2024-05-16T13:14:20.747206Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ntrain_words = train.sign.unique()\nprint(len(train_words))\n# same length as sign to prediction index json\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [markdown]\n# #### **Analysis Ideas**\n# \n# * class embalencement (count words for each element in train dataset)\n# * size analysis (lenght of sequence, linked to words ?)\n# * position ranges (x y z)\n# * number of sequence per participant \n# * train dataset will be splitted for train test val\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T13:14:25.368130Z\",\"iopub.execute_input\":\"2024-05-16T13:14:25.368455Z\",\"iopub.status.idle\":\"2024-05-16T13:14:27.011205Z\",\"shell.execute_reply.started\":\"2024-05-16T13:14:25.368427Z\",\"shell.execute_reply\":\"2024-05-16T13:14:27.009957Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nlandmark_folders = '/kaggle/input/asl-signs/train_landmark_files'\n\nsquences_per_user = {}\n\nuser_ids= os.listdir(landmark_folders)\n\nfor user_foler in user_ids:\n    squences_per_user[user_foler] = len(os.listdir(os.path.join(landmark_folders,user_foler)))\n    print(len(os.listdir(os.path.join(landmark_folders,user_foler))))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T13:14:27.013532Z\",\"iopub.execute_input\":\"2024-05-16T13:14:27.013988Z\",\"iopub.status.idle\":\"2024-05-16T13:14:27.020718Z\",\"shell.execute_reply.started\":\"2024-05-16T13:14:27.013915Z\",\"shell.execute_reply\":\"2024-05-16T13:14:27.019461Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nprint(f'max number of sequence: {np.max(list(squences_per_user.values()))}\\nmin number of sequence: {np.min(list(squences_per_user.values()))}\\nmean of number of sequence per user: {int(np.mean(list(squences_per_user.values())))}\\nstandard deviation: {int(np.std(list(squences_per_user.values())))}')\n\n# %% [markdown]\n# #### **Type analysis**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T15:50:11.832551Z\",\"iopub.execute_input\":\"2024-05-16T15:50:11.833159Z\",\"iopub.status.idle\":\"2024-05-16T16:38:24.775901Z\",\"shell.execute_reply.started\":\"2024-05-16T15:50:11.833116Z\",\"shell.execute_reply\":\"2024-05-16T16:38:24.774136Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nmy_df = pd.DataFrame(index=user_ids,columns=['face', 'pose','l_hand', 'r_hand'])\n\nmy_df.reset_index(inplace=True)\ndisplay(my_df)\ncols = ['frame', 'row_id', 'type', 'landmark_index', 'x', 'y', 'z']\n# types_dic = {'face': 0, 'pose': 0, 'left_hand': 0, 'right_hand': 0}\nfor n,user in enumerate(user_ids):\n    len_seq = 0\n    user_dic = {'face': 0, 'pose': 0, 'left_hand': 0, 'right_hand': 0}\n    sequence_files = os.listdir(os.path.join(dataset_path,user))\n    for idx,sequence in enumerate(sequence_files):\n        parquet_path = os.path.join(dataset_path, user, sequence)\n        parquet_df = pd.read_parquet(parquet_path, columns=cols)\n        len_seq+=len(parquet_df)\n        \n        sequence_dic = dict(parquet_df.type.value_counts())\n        \n        for key in user_dic.keys():\n            user_dic[key]+=sequence_dic[key]\n        \n        \n    print(user_dic, len_seq)\n    my_df.iloc[n, 1:]  = [el/len_seq for el in list(user_dic.values())]\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T16:40:03.132450Z\",\"iopub.execute_input\":\"2024-05-16T16:40:03.132918Z\",\"iopub.status.idle\":\"2024-05-16T16:40:03.453360Z\",\"shell.execute_reply.started\":\"2024-05-16T16:40:03.132881Z\",\"shell.execute_reply\":\"2024-05-16T16:40:03.451997Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T16:43:40.223553Z\",\"iopub.execute_input\":\"2024-05-16T16:43:40.223894Z\",\"iopub.status.idle\":\"2024-05-16T16:43:40.231193Z\",\"shell.execute_reply.started\":\"2024-05-16T16:43:40.223872Z\",\"shell.execute_reply\":\"2024-05-16T16:43:40.229908Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nmy_df.columns\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T16:44:40.308817Z\",\"iopub.execute_input\":\"2024-05-16T16:44:40.309231Z\",\"iopub.status.idle\":\"2024-05-16T16:44:40.316942Z\",\"shell.execute_reply.started\":\"2024-05-16T16:44:40.309197Z\",\"shell.execute_reply\":\"2024-05-16T16:44:40.315971Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nmy_df.to_csv('/kaggle/working/types_distribution.csv', columns=my_df.columns, header=True, index=False)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T16:44:40.645955Z\",\"iopub.execute_input\":\"2024-05-16T16:44:40.646336Z\",\"iopub.status.idle\":\"2024-05-16T16:44:40.665746Z\",\"shell.execute_reply.started\":\"2024-05-16T16:44:40.646308Z\",\"shell.execute_reply\":\"2024-05-16T16:44:40.664013Z\"},\"jupyter\":{\"outputs_hidden\":false}}\npd.read_csv('/kaggle/working/types_distribution.csv')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T15:48:53.178177Z\",\"iopub.execute_input\":\"2024-05-16T15:48:53.178691Z\",\"iopub.status.idle\":\"2024-05-16T15:48:53.191530Z\",\"shell.execute_reply.started\":\"2024-05-16T15:48:53.178653Z\",\"shell.execute_reply\":\"2024-05-16T15:48:53.188933Z\"},\"jupyter\":{\"outputs_hidden\":false}}\na=2699424\nb=(60158592+4241952+2699424+2699424)\n\na/b\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T15:49:45.982095Z\",\"iopub.execute_input\":\"2024-05-16T15:49:45.982695Z\",\"iopub.status.idle\":\"2024-05-16T15:49:45.990323Z\",\"shell.execute_reply.started\":\"2024-05-16T15:49:45.982645Z\",\"shell.execute_reply\":\"2024-05-16T15:49:45.988679Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nc = 1318779\nd = 29389932+2072367+1318779+1318779\nc/d\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T15:34:29.657690Z\",\"iopub.execute_input\":\"2024-05-16T15:34:29.658269Z\",\"iopub.status.idle\":\"2024-05-16T15:34:29.679195Z\",\"shell.execute_reply.started\":\"2024-05-16T15:34:29.658226Z\",\"shell.execute_reply\":\"2024-05-16T15:34:29.676492Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nmy_df.iloc[0, 1:]  = list(user_dic.values())\nmy_df.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T15:06:07.863791Z\",\"iopub.execute_input\":\"2024-05-16T15:06:07.864227Z\",\"iopub.status.idle\":\"2024-05-16T15:06:07.870697Z\",\"shell.execute_reply.started\":\"2024-05-16T15:06:07.864197Z\",\"shell.execute_reply\":\"2024-05-16T15:06:07.869308Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nlen(parquet_df)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T15:18:25.573618Z\",\"iopub.execute_input\":\"2024-05-16T15:18:25.574000Z\",\"iopub.status.idle\":\"2024-05-16T15:18:25.584995Z\",\"shell.execute_reply.started\":\"2024-05-16T15:18:25.573959Z\",\"shell.execute_reply\":\"2024-05-16T15:18:25.584233Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nu=pd.DataFrame(index=[1,2],columns=['a', 'b'])\nu.head()\nu\nu.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T17:01:11.176359Z\",\"iopub.execute_input\":\"2024-05-16T17:01:11.176691Z\",\"iopub.status.idle\":\"2024-05-16T17:01:11.206079Z\",\"shell.execute_reply.started\":\"2024-05-16T17:01:11.176666Z\",\"shell.execute_reply\":\"2024-05-16T17:01:11.205025Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nparquet_path = os.path.join(dataset_path, user_ids[0],test_filenames[1]) # only first sequence of user here\ncols = ['frame', 'row_id', 'type', 'landmark_index', 'x', 'y', 'z']\nparquet_df = pd.read_parquet(parquet_path, columns=cols)\n# type distribution for 1st seuence\ndd= dict(parquet_df.type.value_counts())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T13:25:38.017029Z\",\"iopub.execute_input\":\"2024-05-16T13:25:38.017417Z\",\"iopub.status.idle\":\"2024-05-16T13:25:38.034740Z\",\"shell.execute_reply.started\":\"2024-05-16T13:25:38.017389Z\",\"shell.execute_reply\":\"2024-05-16T13:25:38.033480Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# word signed in previsous sequence \ntrain.loc[train.path == parquet_path[24:]].sign\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T13:23:32.555322Z\",\"iopub.execute_input\":\"2024-05-16T13:23:32.555700Z\",\"iopub.status.idle\":\"2024-05-16T13:23:32.563173Z\",\"shell.execute_reply.started\":\"2024-05-16T13:23:32.555669Z\",\"shell.execute_reply\":\"2024-05-16T13:23:32.561662Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nparquet_path[24:]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T13:51:13.364577Z\",\"iopub.execute_input\":\"2024-05-16T13:51:13.364937Z\",\"iopub.status.idle\":\"2024-05-16T13:51:13.371111Z\",\"shell.execute_reply.started\":\"2024-05-16T13:51:13.364907Z\",\"shell.execute_reply\":\"2024-05-16T13:51:13.369482Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ntypes_dic = {'face': 0, 'pose': 0, 'left_hand': 0, 'right_hand': 0}\nfor key in types_dic.keys():\n     print(dd[key])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T17:01:23.895705Z\",\"iopub.execute_input\":\"2024-05-16T17:01:23.896391Z\",\"iopub.status.idle\":\"2024-05-16T17:01:24.065039Z\",\"shell.execute_reply.started\":\"2024-05-16T17:01:23.896362Z\",\"shell.execute_reply\":\"2024-05-16T17:01:24.064290Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ncols = ['frame', 'row_id', 'type', 'landmark_index', 'x', 'y', 'z']\nsequence_files = os.listdir(os.path.join(dataset_path,user_ids[0]))\nparquet_path = os.path.join(dataset_path, user_ids[0], sequence_files[0])\nparquet_df = pd.read_parquet(parquet_path, columns=cols)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T17:05:59.069308Z\",\"iopub.execute_input\":\"2024-05-16T17:05:59.069670Z\",\"iopub.status.idle\":\"2024-05-16T17:05:59.080009Z\",\"shell.execute_reply.started\":\"2024-05-16T17:05:59.069641Z\",\"shell.execute_reply\":\"2024-05-16T17:05:59.079054Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nparquet_df.row_id.unique()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T17:05:17.768658Z\",\"iopub.execute_input\":\"2024-05-16T17:05:17.769841Z\",\"iopub.status.idle\":\"2024-05-16T17:05:17.792499Z\",\"shell.execute_reply.started\":\"2024-05-16T17:05:17.769802Z\",\"shell.execute_reply\":\"2024-05-16T17:05:17.791395Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nparquet_df.groupby(['type']).head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T17:07:52.528048Z\",\"iopub.execute_input\":\"2024-05-16T17:07:52.529294Z\",\"iopub.status.idle\":\"2024-05-16T17:07:52.553646Z\",\"shell.execute_reply.started\":\"2024-05-16T17:07:52.529208Z\",\"shell.execute_reply\":\"2024-05-16T17:07:52.552663Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T17:21:49.417057Z\",\"iopub.execute_input\":\"2024-05-16T17:21:49.417833Z\",\"iopub.status.idle\":\"2024-05-16T17:21:49.422387Z\",\"shell.execute_reply.started\":\"2024-05-16T17:21:49.417801Z\",\"shell.execute_reply\":\"2024-05-16T17:21:49.421244Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nuser_enum = enumerate(user_ids)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T17:22:24.602348Z\",\"iopub.execute_input\":\"2024-05-16T17:22:24.603145Z\",\"iopub.status.idle\":\"2024-05-16T17:22:24.644623Z\",\"shell.execute_reply.started\":\"2024-05-16T17:22:24.603107Z\",\"shell.execute_reply\":\"2024-05-16T17:22:24.643548Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n_,user = next(user_enum)\nsequence_files = os.listdir(os.path.join(dataset_path,user))\nparquet_path = os.path.join(dataset_path, user, sequence_files[0])\nparquet_df = pd.read_parquet(parquet_path, columns=cols)\n\ntype_mean = parquet_df.groupby(['type'])[['x', 'y', 'z']].mean().reset_index(drop=False)\ntype_mean.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T17:20:29.318953Z\",\"iopub.execute_input\":\"2024-05-16T17:20:29.319837Z\",\"iopub.status.idle\":\"2024-05-16T17:20:29.325803Z\",\"shell.execute_reply.started\":\"2024-05-16T17:20:29.319802Z\",\"shell.execute_reply\":\"2024-05-16T17:20:29.324722Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nnext(enumerate(user_ids))\n\n# %% [markdown]\n# ### **21/05 Test Landmark Index**\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-05-21T09:57:55.355724Z\",\"iopub.execute_input\":\"2024-05-21T09:57:55.356163Z\",\"iopub.status.idle\":\"2024-05-21T09:57:55.408419Z\",\"shell.execute_reply.started\":\"2024-05-21T09:57:55.356129Z\",\"shell.execute_reply\":\"2024-05-21T09:57:55.407225Z\"}}\nparquet_path = os.path.join(dataset_path, user_ids[0],test_filenames[10]) # only first sequence of user here\ncols = ['frame', 'row_id', 'type', 'landmark_index', 'x', 'y', 'z']\nparquet_df = pd.read_parquet(parquet_path, columns=cols)\n# type distribution for 1st seuence\ndd= dict(parquet_df.type.value_counts())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T09:57:22.666779Z\",\"iopub.execute_input\":\"2024-05-21T09:57:22.667637Z\",\"iopub.status.idle\":\"2024-05-21T09:57:22.674662Z\",\"shell.execute_reply.started\":\"2024-05-21T09:57:22.667595Z\",\"shell.execute_reply\":\"2024-05-21T09:57:22.673408Z\"}}\nparquet_path\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T09:57:22.923581Z\",\"iopub.execute_input\":\"2024-05-21T09:57:22.924167Z\",\"iopub.status.idle\":\"2024-05-21T09:57:22.934142Z\",\"shell.execute_reply.started\":\"2024-05-21T09:57:22.924124Z\",\"shell.execute_reply\":\"2024-05-21T09:57:22.932126Z\"}}\nLIPS_IDXS0 = np.array([\n        61, 185, 40, 39, 37, 0, 267, 269, 270, 409,\n        291, 146, 91, 181, 84, 17, 314, 405, 321, 375,\n        78, 191, 80, 81, 82, 13, 312, 311, 310, 415,\n        95, 88, 178, 87, 14, 317, 402, 318, 324, 308,\n    ])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T10:01:39.748731Z\",\"iopub.execute_input\":\"2024-05-21T10:01:39.749291Z\",\"iopub.status.idle\":\"2024-05-21T10:01:39.759349Z\",\"shell.execute_reply.started\":\"2024-05-21T10:01:39.749253Z\",\"shell.execute_reply\":\"2024-05-21T10:01:39.757727Z\"}}\ndf= parquet_df\ndf.type.unique()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T09:58:00.544034Z\",\"iopub.execute_input\":\"2024-05-21T09:58:00.544551Z\",\"iopub.status.idle\":\"2024-05-21T09:58:00.562487Z\",\"shell.execute_reply.started\":\"2024-05-21T09:58:00.544513Z\",\"shell.execute_reply\":\"2024-05-21T09:58:00.561040Z\"}}\nface_df = parquet_df[parquet_df.type == 'face']\nf_id = face_df.frame[0]\nface_df_f0 = face_df[face_df.frame == f_id]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T09:58:00.706741Z\",\"iopub.execute_input\":\"2024-05-21T09:58:00.707178Z\",\"iopub.status.idle\":\"2024-05-21T09:58:01.031452Z\",\"shell.execute_reply.started\":\"2024-05-21T09:58:00.707144Z\",\"shell.execute_reply\":\"2024-05-21T09:58:01.030143Z\"}}\nplt.scatter(face_df_f0.x, face_df_f0.y)\nplt.scatter(face_df_f0.x[LIPS_IDXS0], face_df_f0.y[LIPS_IDXS0], c='r')\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T09:51:45.263946Z\",\"iopub.execute_input\":\"2024-05-21T09:51:45.264432Z\",\"iopub.status.idle\":\"2024-05-21T09:51:45.275259Z\",\"shell.execute_reply.started\":\"2024-05-21T09:51:45.264391Z\",\"shell.execute_reply\":\"2024-05-21T09:51:45.274078Z\"}}\nface_df_f0.x[LIPS_IDXS0]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T10:00:21.802187Z\",\"iopub.execute_input\":\"2024-05-21T10:00:21.802599Z\",\"iopub.status.idle\":\"2024-05-21T10:00:21.818641Z\",\"shell.execute_reply.started\":\"2024-05-21T10:00:21.802567Z\",\"shell.execute_reply\":\"2024-05-21T10:00:21.817226Z\"}}\nface_df.landmark_index.unique()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T10:00:55.992951Z\",\"iopub.execute_input\":\"2024-05-21T10:00:55.993433Z\",\"iopub.status.idle\":\"2024-05-21T10:00:56.009334Z\",\"shell.execute_reply.started\":\"2024-05-21T10:00:55.993399Z\",\"shell.execute_reply\":\"2024-05-21T10:00:56.008098Z\"}}\npose_df = parquet_df[parquet_df.type == 'pose']\npose_df.landmark_index.unique()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T10:01:53.369768Z\",\"iopub.execute_input\":\"2024-05-21T10:01:53.370189Z\",\"iopub.status.idle\":\"2024-05-21T10:01:53.383721Z\",\"shell.execute_reply.started\":\"2024-05-21T10:01:53.370156Z\",\"shell.execute_reply\":\"2024-05-21T10:01:53.382558Z\"}}\nlh_df = parquet_df[parquet_df.type == 'left_hand']\nlh_df.landmark_index.unique()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-21T10:02:10.961023Z\",\"iopub.execute_input\":\"2024-05-21T10:02:10.962032Z\",\"iopub.status.idle\":\"2024-05-21T10:02:10.976308Z\",\"shell.execute_reply.started\":\"2024-05-21T10:02:10.961964Z\",\"shell.execute_reply\":\"2024-05-21T10:02:10.975032Z\"}}\nrh_df = parquet_df[parquet_df.type == 'right_hand']\nrh_df.landmark_index.unique()\n\n# %% [code]\n","metadata":{"_uuid":"6404b45f-a053-4637-b4a5-7239b67c777d","_cell_guid":"dc3bfab3-a27c-4dd0-9ee8-dd1c1a1fa016","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}